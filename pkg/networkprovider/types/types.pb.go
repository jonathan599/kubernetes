/*
Copyright 2016 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	ActiveRequest
	ActivateResponse
	CommonResponse
	Subnet
	Route
	Network
	GetNetworkRequest
	GetNetworkResponse
	CreateNetworkRequest
	UpdateNetworkRequest
	DeleteNetworkRequest
	GetLoadBalancerRequest
	GetLoadBalancerResponse
	HostPort
	LoadBalancer
	CreateLoadBalancerRequest
	CreateLoadBalancerResponse
	UpdateLoadBalancerRequest
	UpdateLoadBalancerResponse
	DeleteLoadBalancerRequest
	CheckTenantIDRequest
	CheckTenantIDResponse
	SetupPodRequest
	TeardownPodRequest
	PodStatusRequest
	PodStatusResponse
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ActiveRequest struct {
}

func (m *ActiveRequest) Reset()                    { *m = ActiveRequest{} }
func (m *ActiveRequest) String() string            { return proto.CompactTextString(m) }
func (*ActiveRequest) ProtoMessage()               {}
func (*ActiveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ActivateResponse struct {
	Result bool   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ActivateResponse) Reset()                    { *m = ActivateResponse{} }
func (m *ActivateResponse) String() string            { return proto.CompactTextString(m) }
func (*ActivateResponse) ProtoMessage()               {}
func (*ActivateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CommonResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *CommonResponse) Reset()                    { *m = CommonResponse{} }
func (m *CommonResponse) String() string            { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()               {}
func (*CommonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Subnet is a representaion of a subnet
type Subnet struct {
	Name       string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Uid        string   `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	Cidr       string   `protobuf:"bytes,3,opt,name=cidr" json:"cidr,omitempty"`
	Gateway    string   `protobuf:"bytes,4,opt,name=gateway" json:"gateway,omitempty"`
	Tenantid   string   `protobuf:"bytes,5,opt,name=tenantid" json:"tenantid,omitempty"`
	Dnsservers []string `protobuf:"bytes,6,rep,name=dnsservers" json:"dnsservers,omitempty"`
	Routes     []*Route `protobuf:"bytes,7,rep,name=routes" json:"routes,omitempty"`
}

func (m *Subnet) Reset()                    { *m = Subnet{} }
func (m *Subnet) String() string            { return proto.CompactTextString(m) }
func (*Subnet) ProtoMessage()               {}
func (*Subnet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Subnet) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

// Route is a representation of an advanced routing rule.
type Route struct {
	Name            string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Nexthop         string `protobuf:"bytes,2,opt,name=nexthop" json:"nexthop,omitempty"`
	DestinationCIDR string `protobuf:"bytes,3,opt,name=destinationCIDR" json:"destinationCIDR,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Network struct {
	Name      string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Uid       string    `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	TenantID  string    `protobuf:"bytes,3,opt,name=tenantID" json:"tenantID,omitempty"`
	SegmentID int32     `protobuf:"varint,4,opt,name=segmentID" json:"segmentID,omitempty"`
	Subnets   []*Subnet `protobuf:"bytes,5,rep,name=subnets" json:"subnets,omitempty"`
	// Status of network
	// Valid value: Initializing, Active, Pending, Failed, Terminating
	Status string `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Network) GetSubnets() []*Subnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

type GetNetworkRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *GetNetworkRequest) Reset()                    { *m = GetNetworkRequest{} }
func (m *GetNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNetworkRequest) ProtoMessage()               {}
func (*GetNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GetNetworkResponse struct {
	Network *Network `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Error   string   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetNetworkResponse) Reset()                    { *m = GetNetworkResponse{} }
func (m *GetNetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNetworkResponse) ProtoMessage()               {}
func (*GetNetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetNetworkResponse) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type CreateNetworkRequest struct {
	Network *Network `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
}

func (m *CreateNetworkRequest) Reset()                    { *m = CreateNetworkRequest{} }
func (m *CreateNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNetworkRequest) ProtoMessage()               {}
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateNetworkRequest) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type UpdateNetworkRequest struct {
	Network *Network `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
}

func (m *UpdateNetworkRequest) Reset()                    { *m = UpdateNetworkRequest{} }
func (m *UpdateNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNetworkRequest) ProtoMessage()               {}
func (*UpdateNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateNetworkRequest) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type DeleteNetworkRequest struct {
	NetworkName string `protobuf:"bytes,1,opt,name=networkName" json:"networkName,omitempty"`
}

func (m *DeleteNetworkRequest) Reset()                    { *m = DeleteNetworkRequest{} }
func (m *DeleteNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNetworkRequest) ProtoMessage()               {}
func (*DeleteNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetLoadBalancerRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetLoadBalancerRequest) Reset()                    { *m = GetLoadBalancerRequest{} }
func (m *GetLoadBalancerRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLoadBalancerRequest) ProtoMessage()               {}
func (*GetLoadBalancerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type GetLoadBalancerResponse struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,1,opt,name=loadBalancer" json:"loadBalancer,omitempty"`
	Error        string        `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *GetLoadBalancerResponse) Reset()                    { *m = GetLoadBalancerResponse{} }
func (m *GetLoadBalancerResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLoadBalancerResponse) ProtoMessage()               {}
func (*GetLoadBalancerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetLoadBalancerResponse) GetLoadBalancer() *LoadBalancer {
	if m != nil {
		return m.LoadBalancer
	}
	return nil
}

type HostPort struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ipaddress   string `protobuf:"bytes,2,opt,name=ipaddress" json:"ipaddress,omitempty"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort" json:"servicePort,omitempty"`
	TargetPort  int32  `protobuf:"varint,4,opt,name=targetPort" json:"targetPort,omitempty"`
}

func (m *HostPort) Reset()                    { *m = HostPort{} }
func (m *HostPort) String() string            { return proto.CompactTextString(m) }
func (*HostPort) ProtoMessage()               {}
func (*HostPort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// LoadBalancer is a replace of kube-proxy, so load-balancing can be handled
// by network providers so as to overcome iptables overhead
type LoadBalancer struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Uid  string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	Vip  string `protobuf:"bytes,3,opt,name=vip" json:"vip,omitempty"`
	// Valid values: "TCP", "UDP", "HTTP", "HTTPS"
	LoadBalanceType string      `protobuf:"bytes,4,opt,name=loadBalanceType" json:"loadBalanceType,omitempty"`
	Status          string      `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	TenantID        string      `protobuf:"bytes,6,opt,name=tenantID" json:"tenantID,omitempty"`
	ExternalIPs     []string    `protobuf:"bytes,7,rep,name=externalIPs" json:"externalIPs,omitempty"`
	Subnets         []*Subnet   `protobuf:"bytes,8,rep,name=subnets" json:"subnets,omitempty"`
	Hosts           []*HostPort `protobuf:"bytes,9,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *LoadBalancer) Reset()                    { *m = LoadBalancer{} }
func (m *LoadBalancer) String() string            { return proto.CompactTextString(m) }
func (*LoadBalancer) ProtoMessage()               {}
func (*LoadBalancer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *LoadBalancer) GetSubnets() []*Subnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

func (m *LoadBalancer) GetHosts() []*HostPort {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type CreateLoadBalancerRequest struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,1,opt,name=loadBalancer" json:"loadBalancer,omitempty"`
	// Valid value: ClientIP, None
	Affinity string `protobuf:"bytes,2,opt,name=affinity" json:"affinity,omitempty"`
}

func (m *CreateLoadBalancerRequest) Reset()                    { *m = CreateLoadBalancerRequest{} }
func (m *CreateLoadBalancerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateLoadBalancerRequest) ProtoMessage()               {}
func (*CreateLoadBalancerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CreateLoadBalancerRequest) GetLoadBalancer() *LoadBalancer {
	if m != nil {
		return m.LoadBalancer
	}
	return nil
}

type CreateLoadBalancerResponse struct {
	Vip   string `protobuf:"bytes,1,opt,name=vip" json:"vip,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *CreateLoadBalancerResponse) Reset()                    { *m = CreateLoadBalancerResponse{} }
func (m *CreateLoadBalancerResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateLoadBalancerResponse) ProtoMessage()               {}
func (*CreateLoadBalancerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type UpdateLoadBalancerRequest struct {
	Name        string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ExternalIPs []string    `protobuf:"bytes,2,rep,name=externalIPs" json:"externalIPs,omitempty"`
	Hosts       []*HostPort `protobuf:"bytes,3,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *UpdateLoadBalancerRequest) Reset()                    { *m = UpdateLoadBalancerRequest{} }
func (m *UpdateLoadBalancerRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateLoadBalancerRequest) ProtoMessage()               {}
func (*UpdateLoadBalancerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateLoadBalancerRequest) GetHosts() []*HostPort {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type UpdateLoadBalancerResponse struct {
	Vip   string `protobuf:"bytes,1,opt,name=vip" json:"vip,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *UpdateLoadBalancerResponse) Reset()                    { *m = UpdateLoadBalancerResponse{} }
func (m *UpdateLoadBalancerResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateLoadBalancerResponse) ProtoMessage()               {}
func (*UpdateLoadBalancerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type DeleteLoadBalancerRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteLoadBalancerRequest) Reset()                    { *m = DeleteLoadBalancerRequest{} }
func (m *DeleteLoadBalancerRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteLoadBalancerRequest) ProtoMessage()               {}
func (*DeleteLoadBalancerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type CheckTenantIDRequest struct {
	TenantID string `protobuf:"bytes,1,opt,name=tenantID" json:"tenantID,omitempty"`
}

func (m *CheckTenantIDRequest) Reset()                    { *m = CheckTenantIDRequest{} }
func (m *CheckTenantIDRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckTenantIDRequest) ProtoMessage()               {}
func (*CheckTenantIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type CheckTenantIDResponse struct {
	Result bool   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *CheckTenantIDResponse) Reset()                    { *m = CheckTenantIDResponse{} }
func (m *CheckTenantIDResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckTenantIDResponse) ProtoMessage()               {}
func (*CheckTenantIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type SetupPodRequest struct {
	PodName             string   `protobuf:"bytes,1,opt,name=podName" json:"podName,omitempty"`
	Namespace           string   `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	ContainerRuntime    string   `protobuf:"bytes,3,opt,name=containerRuntime" json:"containerRuntime,omitempty"`
	PodInfraContainerID string   `protobuf:"bytes,4,opt,name=podInfraContainerID" json:"podInfraContainerID,omitempty"`
	Network             *Network `protobuf:"bytes,5,opt,name=network" json:"network,omitempty"`
}

func (m *SetupPodRequest) Reset()                    { *m = SetupPodRequest{} }
func (m *SetupPodRequest) String() string            { return proto.CompactTextString(m) }
func (*SetupPodRequest) ProtoMessage()               {}
func (*SetupPodRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SetupPodRequest) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type TeardownPodRequest struct {
	PodName             string   `protobuf:"bytes,1,opt,name=podName" json:"podName,omitempty"`
	Namespace           string   `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	ContainerRuntime    string   `protobuf:"bytes,3,opt,name=containerRuntime" json:"containerRuntime,omitempty"`
	PodInfraContainerID string   `protobuf:"bytes,4,opt,name=podInfraContainerID" json:"podInfraContainerID,omitempty"`
	Network             *Network `protobuf:"bytes,5,opt,name=network" json:"network,omitempty"`
}

func (m *TeardownPodRequest) Reset()                    { *m = TeardownPodRequest{} }
func (m *TeardownPodRequest) String() string            { return proto.CompactTextString(m) }
func (*TeardownPodRequest) ProtoMessage()               {}
func (*TeardownPodRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *TeardownPodRequest) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type PodStatusRequest struct {
	PodName             string   `protobuf:"bytes,1,opt,name=podName" json:"podName,omitempty"`
	Namespace           string   `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	ContainerRuntime    string   `protobuf:"bytes,3,opt,name=containerRuntime" json:"containerRuntime,omitempty"`
	PodInfraContainerID string   `protobuf:"bytes,4,opt,name=podInfraContainerID" json:"podInfraContainerID,omitempty"`
	Network             *Network `protobuf:"bytes,5,opt,name=network" json:"network,omitempty"`
}

func (m *PodStatusRequest) Reset()                    { *m = PodStatusRequest{} }
func (m *PodStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*PodStatusRequest) ProtoMessage()               {}
func (*PodStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *PodStatusRequest) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type PodStatusResponse struct {
	Ip    string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *PodStatusResponse) Reset()                    { *m = PodStatusResponse{} }
func (m *PodStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*PodStatusResponse) ProtoMessage()               {}
func (*PodStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func init() {
	proto.RegisterType((*ActiveRequest)(nil), "types.ActiveRequest")
	proto.RegisterType((*ActivateResponse)(nil), "types.ActivateResponse")
	proto.RegisterType((*CommonResponse)(nil), "types.CommonResponse")
	proto.RegisterType((*Subnet)(nil), "types.Subnet")
	proto.RegisterType((*Route)(nil), "types.Route")
	proto.RegisterType((*Network)(nil), "types.Network")
	proto.RegisterType((*GetNetworkRequest)(nil), "types.GetNetworkRequest")
	proto.RegisterType((*GetNetworkResponse)(nil), "types.GetNetworkResponse")
	proto.RegisterType((*CreateNetworkRequest)(nil), "types.CreateNetworkRequest")
	proto.RegisterType((*UpdateNetworkRequest)(nil), "types.UpdateNetworkRequest")
	proto.RegisterType((*DeleteNetworkRequest)(nil), "types.DeleteNetworkRequest")
	proto.RegisterType((*GetLoadBalancerRequest)(nil), "types.GetLoadBalancerRequest")
	proto.RegisterType((*GetLoadBalancerResponse)(nil), "types.GetLoadBalancerResponse")
	proto.RegisterType((*HostPort)(nil), "types.HostPort")
	proto.RegisterType((*LoadBalancer)(nil), "types.LoadBalancer")
	proto.RegisterType((*CreateLoadBalancerRequest)(nil), "types.CreateLoadBalancerRequest")
	proto.RegisterType((*CreateLoadBalancerResponse)(nil), "types.CreateLoadBalancerResponse")
	proto.RegisterType((*UpdateLoadBalancerRequest)(nil), "types.UpdateLoadBalancerRequest")
	proto.RegisterType((*UpdateLoadBalancerResponse)(nil), "types.UpdateLoadBalancerResponse")
	proto.RegisterType((*DeleteLoadBalancerRequest)(nil), "types.DeleteLoadBalancerRequest")
	proto.RegisterType((*CheckTenantIDRequest)(nil), "types.CheckTenantIDRequest")
	proto.RegisterType((*CheckTenantIDResponse)(nil), "types.CheckTenantIDResponse")
	proto.RegisterType((*SetupPodRequest)(nil), "types.SetupPodRequest")
	proto.RegisterType((*TeardownPodRequest)(nil), "types.TeardownPodRequest")
	proto.RegisterType((*PodStatusRequest)(nil), "types.PodStatusRequest")
	proto.RegisterType((*PodStatusResponse)(nil), "types.PodStatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Networks service

type NetworksClient interface {
	Active(ctx context.Context, in *ActiveRequest, opts ...grpc.CallOption) (*ActivateResponse, error)
	CheckTenantID(ctx context.Context, in *CheckTenantIDRequest, opts ...grpc.CallOption) (*CheckTenantIDResponse, error)
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type networksClient struct {
	cc *grpc.ClientConn
}

func NewNetworksClient(cc *grpc.ClientConn) NetworksClient {
	return &networksClient{cc}
}

func (c *networksClient) Active(ctx context.Context, in *ActiveRequest, opts ...grpc.CallOption) (*ActivateResponse, error) {
	out := new(ActivateResponse)
	err := grpc.Invoke(ctx, "/types.Networks/Active", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networksClient) CheckTenantID(ctx context.Context, in *CheckTenantIDRequest, opts ...grpc.CallOption) (*CheckTenantIDResponse, error) {
	out := new(CheckTenantIDResponse)
	err := grpc.Invoke(ctx, "/types.Networks/CheckTenantID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networksClient) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	out := new(GetNetworkResponse)
	err := grpc.Invoke(ctx, "/types.Networks/GetNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networksClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/types.Networks/CreateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networksClient) UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/types.Networks/UpdateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networksClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/types.Networks/DeleteNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Networks service

type NetworksServer interface {
	Active(context.Context, *ActiveRequest) (*ActivateResponse, error)
	CheckTenantID(context.Context, *CheckTenantIDRequest) (*CheckTenantIDResponse, error)
	GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error)
	CreateNetwork(context.Context, *CreateNetworkRequest) (*CommonResponse, error)
	UpdateNetwork(context.Context, *UpdateNetworkRequest) (*CommonResponse, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*CommonResponse, error)
}

func RegisterNetworksServer(s *grpc.Server, srv NetworksServer) {
	s.RegisterService(&_Networks_serviceDesc, srv)
}

func _Networks_Active_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NetworksServer).Active(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Networks_CheckTenantID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CheckTenantIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NetworksServer).CheckTenantID(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Networks_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NetworksServer).GetNetwork(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Networks_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NetworksServer).CreateNetwork(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Networks_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NetworksServer).UpdateNetwork(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Networks_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(NetworksServer).DeleteNetwork(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Networks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Networks",
	HandlerType: (*NetworksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Active",
			Handler:    _Networks_Active_Handler,
		},
		{
			MethodName: "CheckTenantID",
			Handler:    _Networks_CheckTenantID_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _Networks_GetNetwork_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _Networks_CreateNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _Networks_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _Networks_DeleteNetwork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for LoadBalancers service

type LoadBalancersClient interface {
	GetLoadBalancer(ctx context.Context, in *GetLoadBalancerRequest, opts ...grpc.CallOption) (*GetLoadBalancerResponse, error)
	CreateLoadBalancer(ctx context.Context, in *CreateLoadBalancerRequest, opts ...grpc.CallOption) (*CreateLoadBalancerResponse, error)
	UpdateLoadBalancer(ctx context.Context, in *UpdateLoadBalancerRequest, opts ...grpc.CallOption) (*UpdateLoadBalancerResponse, error)
	DeleteLoadBalancer(ctx context.Context, in *DeleteLoadBalancerRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type loadBalancersClient struct {
	cc *grpc.ClientConn
}

func NewLoadBalancersClient(cc *grpc.ClientConn) LoadBalancersClient {
	return &loadBalancersClient{cc}
}

func (c *loadBalancersClient) GetLoadBalancer(ctx context.Context, in *GetLoadBalancerRequest, opts ...grpc.CallOption) (*GetLoadBalancerResponse, error) {
	out := new(GetLoadBalancerResponse)
	err := grpc.Invoke(ctx, "/types.LoadBalancers/GetLoadBalancer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancersClient) CreateLoadBalancer(ctx context.Context, in *CreateLoadBalancerRequest, opts ...grpc.CallOption) (*CreateLoadBalancerResponse, error) {
	out := new(CreateLoadBalancerResponse)
	err := grpc.Invoke(ctx, "/types.LoadBalancers/CreateLoadBalancer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancersClient) UpdateLoadBalancer(ctx context.Context, in *UpdateLoadBalancerRequest, opts ...grpc.CallOption) (*UpdateLoadBalancerResponse, error) {
	out := new(UpdateLoadBalancerResponse)
	err := grpc.Invoke(ctx, "/types.LoadBalancers/UpdateLoadBalancer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancersClient) DeleteLoadBalancer(ctx context.Context, in *DeleteLoadBalancerRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/types.LoadBalancers/DeleteLoadBalancer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoadBalancers service

type LoadBalancersServer interface {
	GetLoadBalancer(context.Context, *GetLoadBalancerRequest) (*GetLoadBalancerResponse, error)
	CreateLoadBalancer(context.Context, *CreateLoadBalancerRequest) (*CreateLoadBalancerResponse, error)
	UpdateLoadBalancer(context.Context, *UpdateLoadBalancerRequest) (*UpdateLoadBalancerResponse, error)
	DeleteLoadBalancer(context.Context, *DeleteLoadBalancerRequest) (*CommonResponse, error)
}

func RegisterLoadBalancersServer(s *grpc.Server, srv LoadBalancersServer) {
	s.RegisterService(&_LoadBalancers_serviceDesc, srv)
}

func _LoadBalancers_GetLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(LoadBalancersServer).GetLoadBalancer(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _LoadBalancers_CreateLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(LoadBalancersServer).CreateLoadBalancer(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _LoadBalancers_UpdateLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UpdateLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(LoadBalancersServer).UpdateLoadBalancer(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _LoadBalancers_DeleteLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(LoadBalancersServer).DeleteLoadBalancer(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _LoadBalancers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.LoadBalancers",
	HandlerType: (*LoadBalancersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoadBalancer",
			Handler:    _LoadBalancers_GetLoadBalancer_Handler,
		},
		{
			MethodName: "CreateLoadBalancer",
			Handler:    _LoadBalancers_CreateLoadBalancer_Handler,
		},
		{
			MethodName: "UpdateLoadBalancer",
			Handler:    _LoadBalancers_UpdateLoadBalancer_Handler,
		},
		{
			MethodName: "DeleteLoadBalancer",
			Handler:    _LoadBalancers_DeleteLoadBalancer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Pods service

type PodsClient interface {
	SetupPod(ctx context.Context, in *SetupPodRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	TeardownPod(ctx context.Context, in *TeardownPodRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	PodStatus(ctx context.Context, in *PodStatusRequest, opts ...grpc.CallOption) (*PodStatusResponse, error)
}

type podsClient struct {
	cc *grpc.ClientConn
}

func NewPodsClient(cc *grpc.ClientConn) PodsClient {
	return &podsClient{cc}
}

func (c *podsClient) SetupPod(ctx context.Context, in *SetupPodRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/types.Pods/SetupPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podsClient) TeardownPod(ctx context.Context, in *TeardownPodRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := grpc.Invoke(ctx, "/types.Pods/TeardownPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podsClient) PodStatus(ctx context.Context, in *PodStatusRequest, opts ...grpc.CallOption) (*PodStatusResponse, error) {
	out := new(PodStatusResponse)
	err := grpc.Invoke(ctx, "/types.Pods/PodStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pods service

type PodsServer interface {
	SetupPod(context.Context, *SetupPodRequest) (*CommonResponse, error)
	TeardownPod(context.Context, *TeardownPodRequest) (*CommonResponse, error)
	PodStatus(context.Context, *PodStatusRequest) (*PodStatusResponse, error)
}

func RegisterPodsServer(s *grpc.Server, srv PodsServer) {
	s.RegisterService(&_Pods_serviceDesc, srv)
}

func _Pods_SetupPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SetupPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PodsServer).SetupPod(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Pods_TeardownPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TeardownPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PodsServer).TeardownPod(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Pods_PodStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PodStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PodsServer).PodStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Pods_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Pods",
	HandlerType: (*PodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupPod",
			Handler:    _Pods_SetupPod_Handler,
		},
		{
			MethodName: "TeardownPod",
			Handler:    _Pods_TeardownPod_Handler,
		},
		{
			MethodName: "PodStatus",
			Handler:    _Pods_PodStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 957 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x56, 0xdd, 0x4e, 0x24, 0x45,
	0x14, 0xb6, 0x19, 0x7a, 0x98, 0x39, 0xc3, 0x30, 0x50, 0xb0, 0x4b, 0x33, 0xbb, 0xb2, 0xd8, 0x17,
	0x66, 0x37, 0x46, 0x12, 0x31, 0xf1, 0x27, 0x5e, 0xe8, 0x3a, 0x18, 0x25, 0xd9, 0x20, 0x01, 0x4c,
	0x4c, 0x4c, 0x4c, 0x6a, 0xa7, 0x0b, 0xe8, 0xec, 0x50, 0xd5, 0x56, 0xd5, 0x80, 0xbc, 0x80, 0x77,
	0x1a, 0x5f, 0xc4, 0xd7, 0x30, 0x3e, 0x8d, 0xcf, 0xe0, 0xe9, 0xea, 0xea, 0xa6, 0x7f, 0xaa, 0x61,
	0xdd, 0xab, 0xbd, 0xeb, 0xae, 0x3a, 0xe7, 0xab, 0xef, 0x9c, 0xf3, 0xd5, 0x39, 0x05, 0x03, 0x7d,
	0x93, 0x30, 0xb5, 0x9b, 0x48, 0xa1, 0x05, 0xf1, 0xcd, 0x4f, 0x38, 0x82, 0xe1, 0xf3, 0xa9, 0x8e,
	0xaf, 0xd8, 0x31, 0xfb, 0x65, 0xce, 0x94, 0x0e, 0x3f, 0x82, 0x55, 0xb3, 0x40, 0x35, 0x2e, 0xa9,
	0x44, 0x70, 0xc5, 0xc8, 0x0a, 0x74, 0x25, 0x53, 0xf3, 0x99, 0x0e, 0xbc, 0x1d, 0xef, 0x69, 0x8f,
	0x0c, 0xc1, 0x67, 0x52, 0x0a, 0x19, 0x2c, 0xe0, 0x6f, 0x3f, 0x7c, 0x02, 0x2b, 0x13, 0x71, 0x79,
	0x29, 0x78, 0xe1, 0x50, 0x18, 0x78, 0xc6, 0xe0, 0x37, 0x0f, 0xba, 0x27, 0xf3, 0x97, 0x9c, 0x69,
	0xb2, 0x0c, 0x8b, 0x9c, 0x5e, 0xb2, 0x6c, 0x83, 0x0c, 0xa0, 0x33, 0x8f, 0xa3, 0x0c, 0x26, 0xdd,
	0x9a, 0xc6, 0x91, 0x0c, 0x3a, 0xe6, 0x6f, 0x04, 0x4b, 0xe7, 0xc8, 0xe1, 0x9a, 0xde, 0x04, 0x8b,
	0x66, 0x61, 0x15, 0x7a, 0x9a, 0x71, 0xca, 0x35, 0x3a, 0xf8, 0x66, 0x85, 0x00, 0x44, 0x5c, 0x29,
	0x26, 0xaf, 0x98, 0x54, 0x41, 0x77, 0xa7, 0x83, 0x6b, 0x8f, 0x91, 0xaa, 0x98, 0x6b, 0xa6, 0x82,
	0x25, 0xfc, 0x1f, 0xec, 0x2d, 0xef, 0x66, 0x41, 0x1f, 0xa7, 0x8b, 0xe1, 0x97, 0xe0, 0x9b, 0x8f,
	0x1a, 0x0d, 0x3c, 0x8b, 0xb3, 0x5f, 0xf5, 0x85, 0x48, 0x2c, 0x95, 0x4d, 0x18, 0x45, 0x98, 0x8c,
	0x98, 0x53, 0x1d, 0x0b, 0x3e, 0x39, 0xd8, 0x3f, 0xce, 0x58, 0x85, 0x37, 0xb0, 0x74, 0xc8, 0xf4,
	0xb5, 0x90, 0xaf, 0xee, 0x8a, 0xa4, 0xa0, 0x7a, 0xb0, 0x6f, 0xa3, 0x59, 0x83, 0xbe, 0x62, 0xe7,
	0x97, 0xcc, 0x2c, 0xa5, 0xf1, 0xf8, 0x64, 0x1b, 0x96, 0x94, 0xc9, 0x89, 0xc2, 0x70, 0x52, 0xaa,
	0x43, 0x4b, 0xd5, 0x66, 0x0a, 0x93, 0xae, 0x34, 0xd5, 0xf3, 0x34, 0xb2, 0xf4, 0xe8, 0x0f, 0x61,
	0xed, 0x5b, 0xa6, 0xed, 0xe9, 0xb6, 0x5a, 0x35, 0x12, 0x00, 0x0b, 0x39, 0x87, 0x70, 0x1f, 0x48,
	0xd9, 0xdc, 0x16, 0xe6, 0x49, 0x1a, 0xa9, 0x59, 0x32, 0x2e, 0x83, 0xbd, 0x15, 0x7b, 0x68, 0x1e,
	0x55, 0xad, 0xb4, 0x9f, 0xc2, 0xc6, 0x44, 0x32, 0xac, 0x43, 0xed, 0xdc, 0xfb, 0x70, 0x52, 0xc7,
	0x1f, 0x92, 0xe8, 0x0d, 0x1c, 0x3f, 0x80, 0x8d, 0x7d, 0x36, 0x63, 0x0d, 0xc7, 0x75, 0x18, 0x58,
	0xc7, 0xc3, 0x22, 0xe0, 0xf0, 0x7d, 0x78, 0x88, 0x41, 0xbe, 0x10, 0x34, 0xfa, 0x9a, 0xce, 0x28,
	0x9f, 0x32, 0xe9, 0x4c, 0x4c, 0x78, 0x02, 0x9b, 0x0d, 0x3b, 0x9b, 0x91, 0x67, 0xb0, 0x3c, 0x2b,
	0xad, 0x5b, 0x56, 0xeb, 0x96, 0x55, 0xd9, 0xa5, 0x9e, 0x9b, 0x53, 0xe8, 0x7d, 0x27, 0x94, 0x3e,
	0x12, 0xb2, 0x5e, 0x07, 0xac, 0x76, 0x9c, 0xd0, 0x28, 0xc2, 0x4b, 0xa3, 0xac, 0x24, 0x90, 0x7e,
	0x2a, 0xd4, 0x78, 0xca, 0x52, 0x7b, 0xa3, 0x0a, 0x3f, 0x15, 0xb0, 0xa6, 0xf2, 0x9c, 0x19, 0x8c,
	0x4c, 0x16, 0xe1, 0xdf, 0x1e, 0x2c, 0x57, 0x4e, 0xbd, 0x43, 0x67, 0xf8, 0x73, 0x15, 0x27, 0x56,
	0x62, 0xa8, 0xd9, 0x52, 0x20, 0xa7, 0x48, 0xdf, 0x5e, 0x9c, 0x5b, 0x21, 0xf9, 0x0d, 0x75, 0x76,
	0x73, 0x72, 0x28, 0x7f, 0x26, 0x39, 0x9d, 0x1d, 0x1c, 0x65, 0x37, 0xa7, 0x5f, 0xd6, 0x67, 0xcf,
	0xa5, 0xcf, 0x6d, 0xf0, 0x2f, 0x30, 0x7c, 0x15, 0xf4, 0xcd, 0xee, 0xc8, 0xee, 0xe6, 0x29, 0x09,
	0x7f, 0x84, 0xad, 0x4c, 0x3a, 0xae, 0xf2, 0xfc, 0x8f, 0xac, 0x23, 0x5d, 0x7a, 0x76, 0x16, 0xf3,
	0x58, 0xdf, 0xd8, 0xc4, 0x7f, 0x06, 0x63, 0x17, 0xb2, 0x2d, 0xa8, 0x4d, 0x4a, 0x96, 0xae, 0x5a,
	0xc9, 0x7e, 0x86, 0xad, 0x4c, 0x95, 0xf7, 0x4a, 0xa6, 0x9e, 0x93, 0x05, 0x9b, 0x13, 0x1b, 0x73,
	0xc7, 0x1d, 0x33, 0x32, 0x73, 0xe1, 0xbf, 0x06, 0xb3, 0x67, 0xb0, 0x95, 0xc9, 0xfe, 0x7e, 0x31,
	0x3f, 0xc5, 0x3b, 0x79, 0xc1, 0xa6, 0xaf, 0x4e, 0x6d, 0x11, 0x73, 0xab, 0x72, 0x5d, 0x33, 0xcb,
	0x4f, 0xe0, 0x41, 0xcd, 0xf2, 0xf5, 0x1a, 0xfa, 0xef, 0x1e, 0x8c, 0x4e, 0x98, 0x9e, 0x27, 0x47,
	0x22, 0xca, 0xd1, 0xb1, 0x47, 0x26, 0x22, 0x3a, 0xac, 0x88, 0x3c, 0x25, 0xa5, 0x12, 0x3a, 0x65,
	0x56, 0x8f, 0x01, 0xac, 0x4e, 0x05, 0xd7, 0x34, 0xe6, 0xc8, 0x7d, 0x8e, 0x9d, 0x1a, 0x8d, 0x33,
	0x71, 0x3e, 0x82, 0x75, 0xf4, 0x3e, 0xe0, 0x67, 0x92, 0x4e, 0x72, 0x0b, 0xdb, 0x09, 0xfb, 0xe5,
	0x9e, 0xe0, 0x3b, 0x7b, 0xc2, 0x9f, 0x1e, 0x90, 0x53, 0x46, 0x65, 0x24, 0xae, 0xf9, 0x5b, 0x42,
	0xe9, 0x0f, 0x0f, 0x56, 0x91, 0xca, 0x89, 0xb9, 0x58, 0x6f, 0x03, 0xa1, 0x5d, 0x58, 0x2b, 0xf1,
	0xb1, 0x75, 0x4e, 0x07, 0x82, 0x5b, 0x70, 0x7b, 0x7f, 0x75, 0xa0, 0x67, 0x7d, 0x15, 0xf9, 0x1c,
	0xba, 0xd9, 0x2b, 0x80, 0x6c, 0x58, 0xd8, 0xca, 0xa3, 0x60, 0xbc, 0x59, 0x5e, 0x2d, 0xbd, 0x0c,
	0xc2, 0x77, 0xc8, 0x0b, 0x18, 0x56, 0x34, 0x46, 0x1e, 0x59, 0x5b, 0x97, 0x46, 0xc7, 0x8f, 0xdd,
	0x9b, 0x05, 0xda, 0x04, 0xe0, 0x76, 0x6a, 0x91, 0xc0, 0x5a, 0x37, 0xe6, 0xde, 0x78, 0xcb, 0xb1,
	0x53, 0x80, 0x7c, 0x83, 0x94, 0xca, 0x43, 0xeb, 0x96, 0x92, 0x63, 0x94, 0x8d, 0x1f, 0xe4, 0x9b,
	0x95, 0x27, 0x4c, 0x06, 0x53, 0x19, 0x61, 0x05, 0x8c, 0x6b, 0xb0, 0xdd, 0x09, 0x53, 0x19, 0x68,
	0x05, 0x8c, 0x6b, 0xcc, 0xb5, 0xc2, 0xec, 0xfd, 0xbb, 0x00, 0xc3, 0x72, 0x6f, 0x50, 0xe4, 0x18,
	0x46, 0xb5, 0xa1, 0x46, 0xde, 0xbd, 0x4d, 0x8b, 0xa3, 0x8f, 0x8c, 0xb7, 0xdb, 0xb6, 0x0b, 0xb2,
	0x3f, 0x01, 0x69, 0xb6, 0x56, 0xb2, 0x53, 0xc9, 0x9f, 0x0b, 0xf9, 0xbd, 0x3b, 0x2c, 0xca, 0xe0,
	0xcd, 0xee, 0x58, 0x80, 0xb7, 0x36, 0xe6, 0x02, 0xbc, 0xbd, 0xb5, 0x22, 0xf8, 0xf7, 0x40, 0x9a,
	0x0d, 0xb4, 0x00, 0x6f, 0xed, 0xad, 0xed, 0x09, 0xff, 0xc7, 0x83, 0x45, 0xbc, 0x51, 0x8a, 0x7c,
	0x01, 0xbd, 0xbc, 0x19, 0x92, 0x87, 0xf9, 0x0c, 0xac, 0x76, 0xc7, 0xf6, 0xea, 0x3f, 0x87, 0x41,
	0xa9, 0x73, 0x91, 0x5c, 0xb7, 0xcd, 0x6e, 0xd6, 0x0e, 0xf1, 0x15, 0xf4, 0x8b, 0x9b, 0x4d, 0xf2,
	0x9b, 0x58, 0xef, 0x3d, 0xe3, 0xa0, 0xb9, 0x91, 0x23, 0xbc, 0xec, 0x9a, 0x27, 0xff, 0xc7, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x06, 0x03, 0x34, 0xcd, 0x01, 0x0c, 0x00, 0x00,
}
